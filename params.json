{"name":"Qubob","tagline":"Qubob is example of usage django-bob package","body":"Qubob\r\n=====\r\n\r\nQubob is example usage of `django-bob` library for Django\r\nhttps://bitbucket.org/thesheep/bob/\r\n\r\nHow to run?\r\n========\r\n\r\nVirtualenv (optional)\r\n```\r\npython -m virtualenv --no-site-packages ~/qubob\r\ncd qubob/\r\n```\r\nRequired:\r\n```\r\ngit clone https://github.com/quamilek/qubob.git\r\nsource bin/activate\r\ncd qubob/\r\npip install -e .\r\ncd src\r\n./manage.py runserver\r\n```\r\nAnd open this link in browser:\r\nhttp://127.0.0.1:8000\r\n\r\nDataTableMixin usage\r\n====================\r\n\r\nYour view class must inherited `DataTableMixin` from `bob.data_table`.\r\nDefine fields in class\r\n`sort_variable_name`, `row_per_pages`, `export_variable_name`\r\nand diefine `columns` - is a list of `DataTableColumn` class object contains fields needed for the generation of table header.\r\n### DataTableColumn fields\r\n* **header_name** - name to display in columns header\r\n* **field** - field name in model\r\n* **type** - icon type generated by bob header_table tag\r\n* **selectable** - header in bob tag is selectable, if you use this option\r\n you must include bootstrap/js/bob.js file in your template\r\n* **bob_tag** - set if the column is to be generated by bob tag\r\n* **sort_expression** - example `book__size` (book.size)\r\n* **export** - set when the column is to be exported\r\n\r\nData nedded to generate Data table must be return to the template in `get_context_data`. just that, copy this code:\r\n```\r\ndef get_context_data(self, *args, **kwargs):\r\n        ret = super(DataTableView, self).get_context_data(*args, **kwargs)\r\n        ret.update(\r\n            super(DataTableView, self).get_context_data_paginator(\r\n                *args,\r\n                **kwargs\r\n            )\r\n        )\r\n        ret.update({\r\n            'sort_variable_name': self.sort_variable_name,\r\n            'url_query': self.request.GET,\r\n            'sort': self.sort,\r\n            'columns': self.columns,\r\n        })\r\n        return ret\r\n```\r\n\r\n### Override `get` method\r\nJust that, copy this cod, and replace `ExampleClass` to name your view class:\r\n```\r\ndef get(self, *args, **kwargs):\r\n        self.get_query()\r\n        if self.export_requested():\r\n            return self.response\r\n        return super(ExampleClass, self).get(*args, **kwargs)\r\n```\r\n\r\n### data_table_query\r\nYou must assign to `self.data_table_query` your queryset, preferably at the beginning of `get` method  example:\r\n```\r\ndef get(self, *args, **kwargs):\r\n    books = Book.objects.all()\r\n    self.data_table_query(books)\r\n    if self.export_requested():\r\n        return self.response\r\n    return super(ExampleClass, self).get(*args, **kwargs)\r\n```\r\n\r\n### Export CSV file\r\nIf you want to export data to CSV file you must ovverride `get_csv_data` method. This method mus be return  nestead list contains `string` data. Example:\r\n```\r\n[\r\n    ['Programming Python', 'Feb. 12, 2013, 11:35 a.m.',\t'37.11',],\r\n    ['Python for Data Analysis', 'Feb. 12, 2013, 11:36 a.m.', '22.31',],\r\n]\r\n```\r\n\r\nMethod `get_csv_header` from DataTableMixin return a dict with columns names defined in `self.columns`. Can be used as a first line of CSV file.\r\n\r\n### Template\r\nIn template must add a two tag from BOB.\r\n\r\n`{% table_header columns url_query sort fugue_icons %}`\r\n\r\nand\r\n\r\n`{% pagination bob_page url_query=url_query show_all=0 show_csv=1 fugue_icons=0 %}`\r\n\r\nFirst display a heder of table, the second is responsible for pagination. You should show the data from the query.\r\nExample tamplate:\r\n```\r\n<table class=\"table table-bordered table-striped table-properties\">\r\n    <tr>\r\n        {% table_header columns url_query sort fugue_icons %}\r\n    </tr>\r\n    {% for f in bob_page %}\r\n        <tr>\r\n            <td class=\"column-checkbox\">\r\n                <input type=\"checkbox\" name=\"select\" value=\"{{ f.id }}\">\r\n            </td>\r\n            <td>{{ f.title}}</td>\r\n            <td>{{ f.pub_date }}</td>\r\n            <td>{{ f.price }}</td>\r\n        </tr>\r\n    {% endfor %}\r\n</table>\r\n{% pagination bob_page url_query=url_query show_all=0 show_csv=1 fugue_icons=0 %}\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}